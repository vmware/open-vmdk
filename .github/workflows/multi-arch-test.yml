name: Multi-Architecture Package Test

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-test-multiarch:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU for multi-arch
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Debug environment
      run: |
        echo "Architecture: ${{ matrix.arch }}"
        echo "Docker version:"
        docker --version
        echo "Docker buildx version:"
        docker buildx version
        echo "Available platforms:"
        docker buildx ls
        echo "Current directory contents:"
        ls -la

    - name: Build and test on ${{ matrix.arch }}
      run: |
        # Create a Dockerfile for building and testing
        cat > Dockerfile.test << 'EOF'
        FROM --platform=$TARGETPLATFORM ubuntu:24.04

        # Install build dependencies
        RUN apt-get update && apt-get install -y \
            build-essential \
            debhelper \
            devscripts \
            zlib1g-dev \
            gcc \
            lintian \
            dpkg-dev \
            coreutils \
            grep \
            python3-lxml \
            python3-yaml \
            sed \
            tar \
            util-linux \
            zlib1g \
            python3 \
            python3-libxml2 \
            sudo

        # Copy source code
        COPY . /src
        WORKDIR /src

        # Build packages (without fakeroot in container)
        RUN debian/rules clean
        RUN debian/rules build
        RUN debian/rules binary

        # Verify packages were built
        RUN ls -la ../*.deb

        # Test packages installation
        RUN dpkg -i ../*.deb || (apt-get update && apt-get install -f -y)

        # Basic functionality tests
        RUN vmdk-convert --help || vmdk-convert -h || echo "vmdk-convert help not available"
        RUN ova-compose --help || ova-compose -h || echo "ova-compose help not available"
        RUN ovfenv --help || ovfenv -h || echo "ovfenv help not available"
        RUN mkova.sh --help || mkova.sh -h || echo "mkova.sh help not available"

        # Verify files are installed correctly
        RUN test -f /etc/open-vmdk.conf
        RUN test -d /var/lib/ovfenv
        RUN test -d /usr/share/open-vmdk
        RUN ls -la /usr/share/open-vmdk/template-*.ovf

        EOF

        # Build and run the test with error handling
        echo "Building Docker image for ${{ matrix.arch }}..."
        if docker buildx build \
          --platform linux/${{ matrix.arch }} \
          --file Dockerfile.test \
          --tag open-vmdk-test:${{ matrix.arch }} \
          --progress=plain \
          . ; then
          echo "Docker build completed successfully for ${{ matrix.arch }}"

          # Verify the image was created and tagged correctly
          if docker image inspect open-vmdk-test:${{ matrix.arch }} >/dev/null 2>&1; then
            echo "Docker image verified successfully"
          else
            echo "ERROR: Docker image was not created properly"
            exit 1
          fi
        else
          echo "ERROR: Docker build failed for ${{ matrix.arch }}"
          echo "Build logs should be visible above"
          exit 1
        fi

    - name: Extract packages from container
      if: matrix.arch == 'amd64'  # Only extract from one architecture to avoid conflicts
      run: |
        # Verify the Docker image exists
        if ! docker image inspect open-vmdk-test:${{ matrix.arch }} >/dev/null 2>&1; then
          echo "ERROR: Docker image open-vmdk-test:${{ matrix.arch }} not found"
          exit 1
        fi

        # Create container and copy packages out
        echo "Creating container from open-vmdk-test:${{ matrix.arch }}..."
        if ! docker create --name temp-container open-vmdk-test:${{ matrix.arch }}; then
          echo "ERROR: Failed to create container from image"
          exit 1
        fi

        mkdir -p packages temp-extract

        # Copy the parent directory contents
        echo "Extracting files from container..."
        if docker cp temp-container:/src/.. temp-extract/; then
          echo "Successfully copied files from container"
          ls -la temp-extract/ || true
        else
          echo "ERROR: Failed to copy files from container"
          docker rm temp-container
          exit 1
        fi

        # Find and copy .deb files
        if find temp-extract/ -name "*.deb" -exec cp {} packages/ \; 2>/dev/null; then
          echo "Found and copied .deb files"
        else
          echo "ERROR: No .deb files found in container"
          docker rm temp-container
          exit 1
        fi

        # Clean up container
        docker rm temp-container

        # Verify packages were extracted
        if [ ! -f packages/*.deb ]; then
          echo "ERROR: No .deb packages found after extraction"
          exit 1
        fi

        echo "Successfully extracted packages:"
        ls -la packages/

    - name: Upload packages
      if: matrix.arch == 'amd64'
      uses: actions/upload-artifact@v4
      with:
        name: debian-packages-${{ matrix.arch }}
        path: packages/*.deb
        retention-days: 30

